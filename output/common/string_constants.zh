//String Constants
//10-JUNE-2016

//printf, sprintf and strcatf arguments
const int MSGC_LINEFEED			= 10;	// '\n'

const int MF_NONE				= 0;	// '%n'
const int MF_STRING				= 1;	// '%s'
const int MF_INT				= 2;	// '%i'
const int MF_FLOAT				= 3;	// '%f'
const int MF_NUM				= 4;	// '%d'
const int MF_PTR				= 5;	// '%p'
const int MF_CHAR				= 6;	// '%c'
const int MF_HEXLOWER			= 7;	// '%x'
const int MF_HEXUPPER			= 8;	// '%X'


//Base ASCII Table
const int CHAR_NULL 		= 0; //NULL char, end of string.
const int CHAR_SOH 		= 1; //Start of heading.
const int CHAR_STX 		= 2; //Start of text.
const int CHAR_ETX		= 3; //End of text.
const int CHAR_EOT 		= 4; //End of transmission. 
const int CHAR_ENQ		= 5; //Enquiry
const int CHAR_ACK		= 6; //Acknowledge
const int CHAR_BELL		= 7; //Bell tone.
const int CHAR_BACKSPACE	= 8;
const int CHAR_TAB 		= 9;
const int CHAR_LF		= 10; //Line feed, new line.
const int CHAR_NEWLINE		= 10;
const int CHAR_VTAB 		= 11; //Vertical tab.
const int CHAR_FF		= 12; //Form feed, new page.
const int CHAR_FORMFEED		= 12;
const int CHAR_CR 		= 13; //Carriage return.
const int CHAR_RETURN		= 13;
const int CHAR_SHIFTOUT		= 14;
const int CHAR_SHIFTIN		= 15;
const int CHAR_DLE		= 16; //Data Link Escape
const int CHAR_DEVCONT1		= 17; //Device Control 1
const int CHAR_DEVCONT2		= 18; //Device Control 2
const int CHAR_DEVCONT3		= 19; //Device Control 3
const int CHAR_DEVCONT4		= 20; //Device Control 4
const int CHAR_NEGACK		= 21; //Negative acknowledge.
const int CHAR_SYNCIDLE 	= 22; //Synchronous idle.
const int CHAR_ENDTRANSBLOCK	= 23; //End of transmission block.
const int CHAR_CANCEL		= 24; //Cancel
const int CHAR_ENDMEDIUM	= 25; //End of medium.
const int CHAR_EM		= 25; //End of medium.
const int CHAR_SUB		= 26; //Substitute
const int CHAR_SUBSTITUTE	= 26;
const int CHAR_ESC		= 27; //Escape char.
const int CHAR_FS		= 28; //File separator.
const int CHAR_FILESEP		= 28; 
const int CHAR_GROUPSEP 	= 29;
const int CHAR_GS 		= 29; //Group separator.
const int CHAR_RECORDSEP 	= 30;
const int CHAR_RS 		= 30; //Record separator.
const int CHAR_UNITSEP 		= 31;
const int CHAR_US 		= 31; //Unit separaor
const int CHAR_SPACE 		= 32;
const int CHAR_BANG 		= 33; //Bang sign (!)
const int CHAR_DQUOTE 		= 34; //Double-quote (")
const int CHAR_HASH 		= 35; //Hash sign (#)
const int CHAR_DOLLAR 		= 36; //Dollar sign ($)
const int CHAR_PERCENT 		= 37; //Percent sign (%)
const int CHAR_AND		= 38; //And sign (&)
const int CHAR_QUOTE		= 39; //Single quote (')
const int CHAR_LPAREN		= 40; //Left paren
const int CHAR_RPAREN		= 41; //Right paren
const int CHAR_STAR		= 42; //Star (multiply) sign (*)
const int CHAR_PLUS		= 43; //Plus sign (+)
const int CHAR_COMMA		= 44; //Comma (,)
const int CHAR_MINUS		= 45; //Minus (-)
const int CHAR_DOT		= 46; //Dot (.)
const int CHAR_FSLASH		= 47; //Forward slash (/)
const int CHAR_0		= 48; //Numerals
const int CHAR_1		= 49;
const int CHAR_2		= 50;
const int CHAR_3		= 51;
const int CHAR_4		= 52;
const int CHAR_5		= 53;
const int CHAR_6		= 54;
const int CHAR_7		= 55;
const int CHAR_8		= 56;
const int CHAR_9		= 57;
const int CHAR_COLON		= 58; //Colon (:)
const int CHAR_SCOLON		= 59; //Semicolon (;)
const int CHAR_LESSTHAN		= 60; //Less than (<)
const int CHAR_EQUALS		= 61; //Equals (=)
const int CHAR_MORETHAN		= 62; //More than (>)
const int CHAR_QUESTION		= 63; //Question mark (?)
const int CHAR_ATSIGN		= 64; //At sign (@)
const int CHAR_A		= 65; //Uppercase Alpha
const int CHAR_B		= 66;
const int CHAR_C		= 67;
const int CHAR_D		= 68;
const int CHAR_E		= 69;
const int CHAR_F		= 70;
const int CHAR_G		= 71;
const int CHAR_H		= 72;
const int CHAR_I		= 73;
const int CHAR_J		= 74;
const int CHAR_K		= 75;
const int CHAR_L		= 76;
const int CHAR_M		= 77;
const int CHAR_N		= 78;
const int CHAR_O		= 79;
const int CHAR_P		= 80;
const int CHAR_Q		= 81;
const int CHAR_R		= 82;
const int CHAR_S		= 83;
const int CHAR_T		= 84;
const int CHAR_U		= 85;
const int CHAR_V		= 86;
const int CHAR_W		= 87;
const int CHAR_X		= 88;
const int CHAR_Y		= 89;
const int CHAR_Z		= 90;
const int CHAR_LBRACE		= 91; //Left brace ([)
const int CHAR_BSLASH		= 92; //Backslash (\)
const int CHAR_RBRACE		= 93; //Right brace (])
const int CHAR_CARET		= 94; //Caret (^)
const int CHAR_UNDERSCORE	= 95; //Underscore (_)
const int CHAR_GRAVE		= 96; //Grave (`)
const int CHAR_a		= 97; //Lowercase alpha.
const int CHAR_b		= 98;
const int CHAR_c		= 99;
const int CHAR_d		= 100;
const int CHAR_e		= 101;
const int CHAR_f		= 102;
const int CHAR_g		= 103;
const int CHAR_h		= 104;
const int CHAR_i		= 105;
const int CHAR_j		= 106;
const int CHAR_k		= 107;
const int CHAR_l		= 108;
const int CHAR_m		= 109;
const int CHAR_n		= 110;
const int CHAR_o		= 111;
const int CHAR_p		= 112;
const int CHAR_q		= 113;
const int CHAR_r		= 114;
const int CHAR_s		= 115;
const int CHAR_t		= 116;
const int CHAR_u		= 117;
const int CHAR_v		= 118;
const int CHAR_w		= 119;
const int CHAR_x		= 120;
const int CHAR_y		= 121;
const int CHAR_z		= 122;
const int CHAR_LCURLYBR		= 123; //Left curly brace ({)
const int CHAR_PIPE 		= 124; //Pipe (|)
const int CHAR_RCURLYBR		= 125; //Right curly brace (})
const int CHAR_TILDE		= 126; //Tilde (~)
const int CHAR_UNUSED 		= 127; //Last of Standard ASCII Map
const int CHAR_DEL 		= 127; //Forward delete.


//Extended ASCII

//The following characters will not show in the ZQ editor, or in Zelda Classic, but you may use them 
//in HARDCODED ZScript Strings (not in the ZQ String Editor!) when making a Tile Font, so that you may
//type non-English characters, and mathematical/currency symbols into hard-coded strings, and display
//them using your Tile Font. 

const int CHAR_EURO 			= 128; //Euro Sign €
const int CHAR_BLANK129 		= 129; //Blank
const int CHAR_BLANK130			= 130; //Blank
const int CHAR_QUOTE_LOW 		= 131; //Comma ‚
const int CHAR_FLORIN 			= 132; //Florin Sign ƒ
const int CHAR_DOUBLEQUOTE_LOW 		= 133; //Low Double-Quote „
const int CHAR_ELIPSE 			= 134; //Elipse …
const int CHAR_CROSS 			= 135; //Cross †
const int CHAR_DOUBLE_CROSS		= 136; //Double Cross ‡
const int CHAR_CIRCUMFLEX 		= 137; //Raw Circumflex ˆ
const int CHAR_PERMILLE			= 138; //Permille Sign ‰
const int CHAR_S_CARON 			= 139; //S with Carom Š
const int CHAR_LESSTHAN2 		= 140; // Less Than (Maths) ‹
const int CHAR_DIPTHONG_OE		= 141; //OE Dipthong Œ
const int CHAR_BLANK142 		= 142; //Blank
const int CHAR_Z_CARON 			= 143; //Z with Caron Ž
const int CHAR_BLANK144 		= 144; //Blank
const int CHAR_BLANK145			= 145; //Blank
const int CHAR_QUOTE_FANCY_L		= 146; //Fancy left Quote ‘
const int CHAR_QUOTE_FANCY_R 		= 147; //Fancy Right Quote ’
const int CHAR_DOUBLEQUOTE_L		= 148; //Fancy Left Double-Quote “
const int CHAR_DOUBLEQUOTE_R 		= 149; //Fancy Right Double-Quote ”
const int CHAR_DOT_LIST 		= 150; //Listing Bullet Dot •
const int CHAR_BULLET 			= 150; //Listing Bullet Dot •
const int CHAR_NDASH 			= 151; //N-Dash –
const int CHAR_MDASH 			= 152; //M-Dash —
const int CHAR_TILDE_OVER 		= 153; //Raw Tilde Overscore ˜
const int CHAR_TRADEMARK 		= 154; //Trademark Sign ™
const int CHAR_s_CARON 			= 155; //S with Caron š
const int CHAR_MORETHAN2 		= 156; // More Than (Maths) ›
const int CHAR_DIPTHONG_OW_LOWER 	= 157; //Lowercase OE Dipthong œ
const int CHAR_BLANK158 		= 158; //Blank
const int CHAR_z_CARON 			= 159; //Z with Caron ž
const int CHAR_Y_UMLAT 			= 160; //Y with Umlat Ÿ
const int CHAR_BLANK162 		= 161; //Blank
const int CHAR_BANG_INVERT 		= 162; //Inverted Bang ¡
const int CHAR_CENTS 			= 163; //Cents Sign ¢
const int CHAR_POUNDS 			= 164; //Pounds Sign £
const int CHAR_CURRENCY 		= 165; //Misc. Currency Sign ¤
const int CHAR_YEN 			= 166; //Yen Sign ¥
const int CHAR_BROKEN_BAR 		= 167; //Broken Vertical Bar ¦
const int CHAR_SECTION 			= 168; //Section Sign §
const int CHAR_UMLAT 			= 169; //Raw Umlat ¨
const int CHAR_COPYRIGHT 		= 170; //Copyright Sign ©
const int CHAR_ORDINAL_A 		= 171; //Ordinal A (Fem) ª
const int CHAR_MUCHLESSTHAN 		= 172; //Much Less Than «
const int CHAR_NOT_SYMBOL 		= 173; //Maths Symbol Not ¬
const int CHAR_MATHS_MINUS 		= 174; //Maths Minus Sign ­
const int CHAR_REGISTERED_TM 		= 175; //Registered TM Symbol ®
const int CHAR_MACRON 			= 176; //Macron (Overscore) Sign ¯
const int CHAR_RING 			= 177; //Raw Ring °
const int CHAR_PLUSMINUS 		= 178; //Plus/Minus Sign ±
const int CHAR_SQUARED 			= 179; //Squared (Superscript) 2 ²
const int CHAR_CUBED 			= 180; //Cubed (Superscript) 3 ³
const int CHAR_ACCUTE_ACCENT 		= 181; //Raw Accute Accent ´
const int CHAR_MICRO 			= 182; //Micro Symbol µ
const int CHAR_PARAGRAPH 		= 183; //Paragraph Sign ¶
const int CHAR_DOT_MATHS 		= 184; //Maths Dot (Multiplication) ·
const int CHAR_CEDILLA 			= 185; //Raw Cedilla ¸
const int CHAR_1_SUPER 			= 186; //Superscript 1 ¹
const int CHAR_0_SUPER			= 187; //Superscript 0 º
const int CHAR_FRACTION_QUARTER 	= 188; //Fraction One-Quarter ¼
const int CHAR_FRACTION_HALF 		= 189; //Fraction One-Half ½
const int CHAR_FRACTION_THREE_QUARTERS 	= 190; //Fraction Three-Quarters ¾
const int CHAR_QUESTION_INV 		= 191; //Inverted Question Mark ¿
const int CHAR_A_GRAVE 			= 192; //A with Grave Accent À
const int CHAR_A_ACUTE 			= 193; //A with Acute Accent Á
const int CHAR_A_CIRCUMFLEX 		= 194; //A with Circumflex Â
const int CHAR_A_TILDE 			= 195; //A with Tilde Ã
const int CHAR_A_UMLAT 			= 196; //A with Umlat Ä
const int CHAR_A_RING 			= 197; //A with Ring Å
const int CHAR_DIPTHONG_AE 		= 198; //AE Dipthong Æ
const int CHAR_C_CEDILLA 		= 199; //C with Cedilla Ç
const int CHAR_E_GRAVE 			= 200; //E with Grave Accent È
const int CHAR_E_ACUTE 			= 201; //E with Acute Accent É
const int CHAR_E_CIRCUMFLEX 		= 202; //E withy Circumflex Ê
const int CHAR_E_UMLAT 			= 203; //E with Umlat Accent Ë
const int CHAR_I_GRAVE 			= 204; //I with Grave Accent Ì
//const int CHAR_I_ACUTE 			= 205; //I with Acute Accent Í
const int CHAR_I_CIRCUMFLEX 		= 206; //I with Circumflex Accent Î
const int CHAR_I_UMLAT 			= 207; //I with Umlat Ï
const int CHAR_ETH 			= 208; //Eth Ð
const int CHAR_EYNE 			= 209; //Eyne Ñ
const int CHAR_O_GRAVE 			= 210; //O with Grave Accent Ò
const int CHAR_I_ACUTE 			= 211; //O with Acute Accent Ó
const int CHAR_O_CIRCUMFLEX 		= 212; //O With CircumflexÔ
const int CHAR_O_TILDE 			= 213; //O with Tilde Accent Õ
const int CHAR_O_UMLAT 			= 214; //O with Umlat Ö
const int CHAR_MULTIPLY_X 		= 215; //Multiplication X ×
const int CHAR_O_STROKE 		= 216; //O with Diagonal Stroke Ø
const int CHAR_U_GRAVE 			= 217; //U with Grave Accent Ù
const int CHAR_U_ACUTE 			= 218; //U with Acute Accent Ú
const int CHAR_U_CIRCUMFLEX 		= 219; //U with Circumflex Accent Û
const int CHAR_U_UMLAT 			= 220; //U with Umlat Ü
const int CHAR_Y_ACUTE 			= 221; //Y With Acute Accent Ý
const int CHAR_THORN 			= 222; //Thorn Þ
const int CHAR_BETA 			= 223; //Beta ß
const int CHAR_a_GRAVE 			= 224; //Lowercase a with Grave Accent à
const int CHAR_a_ACUTE 			= 225; //Lowercase a with Acute Accentá
const int CHAR_a_CIRCUMFLEX 		= 226; //Lowercase a with Circumflex Accent â
const int CHAR_a_TILDE 			= 227; //Lowercase a with Tilde Accent ã
const int CHAR_a_UMLAT 			= 228; //Lowercase a with Umlat ä
const int CHAR_a_RING 			= 229; //Lowercase a with Ring å
const int CHAR_DIPTHONG_ae 		= 230; //Lowercase ae Dipthong æ
const int CHAR_c_CEDILLA 		= 231; //Lowercase c with Cedilla ç
const int CHAR_e_GRAVE 			= 232; //Lowercase e with Grave Accent è
const int CHAR_e_ACUTE 			= 233; //Lowercase e with Acute Accent é
const int CHAR_e_CIRCUMFLEX 		= 234; //Lowercase e with Circumflex ê
const int CHAR_e_UMLAT 			= 235; //Lowercase e with Umlat ë
const int CHAR_i_GRAVE 			= 236; //Lowercase i with Grave Accent ì
const int CHAR_i_ACUTE 			= 237; //Lowercase i with Acute Accent í
const int CHAR_i_CIRCUMFLEX 		= 238; //Lowercase i with Circumflex î
const int CHAR_i_UMLAT			= 239; //Lowercase i with Umlat ï
const int CHAR_eth 			= 240; //Lowercade eth ð
const int CHAR_eyne 			= 241; //Lowercase enye ñ
const int CHAR_o_GRAVE 			= 242; //Lowercase o with Grave Accent ò
const int CHAR_o_ACUTE 			= 243; //Lowercase o with Acute Accent ó
const int CHAR_o_CIRCUMFLEX 		= 244; //Lowercase o with Circumflex ô
const int CHAR_o_TILDE 			= 245; //Lowercase o with Tilde õ
const int CHAR_o_UMLAT 			= 246; //Lowercase o with Umlat ö
const int CHAR_DIVISION_MATHS 		= 247; //Maths Division Sign ÷·
const int CHAR_o_STROKE 		= 248; //Lowercase o with Stroke ø
const int CHAR_u_GRAVE 			= 249; //Lowercase u with Grave Accent ù
const int CHAR_u_ACUTE 			= 250; //Lowercase u with Acute Accent ú
const int CHAR_u_CIRCUMFLEX 		= 251; //Lowercase u with Circumflex û
const int CHAR_u_UMLAT 			= 252; //Lowercase u with Umlat ü
const int CHAR_y_ACUTE 			= 253; //Lowercase y with Acute Accent ý
const int CHAR_thorn 			= 254; //Lowercase thorn þ
const int CHAR_y_UMLAT			= 255; //Lowercase y with Umlat ÿ
