//Returns the distance between two sets of coordinates using Pythagoras' Theorem
float Distance(int x1, int y1, int x2, int y2) {
	int x = (x1-x2);
	int y = (y1-y2);
	if ( STD_FORCE_OLD_DISTANCE ) return Sqrt(x*x+y*y);
	else {
		if ( ( x * y ) < 0 ) { 
			
			if ( STD_DISTANCE_USE_SAFESQRT ) return SafeSqrt(x*x+y*y);
			else {
				
				//...or reduce factor by MAX_INT, Sqrt(factor) and add 464?
				//...which way does it roll over?
				//factor = ; 
				int factor =  214747.9999 + (x*y);
				if ( factor > 0 ) return Sqrt(factor) + 464;
				else if ( factor == 0 ) return 464;
				else return Sqrt(214747.9999);
				//else return -1;
				//return Sqrt(( x*y ) * -1) + 464;
			}
		}
	}
		//
}

//Returns the distance between two sets of coordinates using Pythagoras' Theorem
//Allows scaling for large distance determinations.
//Argument 'scale' represents a ratio of 1:scale.
//Argument 'scale' is most precise when using powers of 10 (i.e. 1, 10, 100, 1000, 10000).
//If arg 'scale' is set to 0, it defaults to '1'. 
//Returns -1 on error. 
float Distance(int x1, int y1, int x2, int y2, int scale) {
	if ( scale == 0 ) scale = 1; 
	float x = (x1-x2) / scale;
	float y = (y1-y2) / scale;
	float factor = (x*x)+(y*y);
	if ( factor < 0 ) return -1;
	else return Sqrt(factor) * scale;
}




//Returns the distance between two sets of coordinates using Pythagoras' Theorem
float SafeDistance(int x1, int y1, int x2, int y2) {
	int x; 
	int y;
	if ( x1 > x2 ) x = x1-x2;
	else x = x2 - x1;
	if ( y1 > y2 ) y = y1-y2;
	else y = y2 - y1;
	return Sqrt(x*x+y*y);
}

//Returns the distance between two sets of coordinates using Pythagoras' Theorem
//Arg specify_negative_value is used to specify a value to return is a negative number is parsed to
//determine a square root. 
//float Distance(int x1, int y1, int x2, int y2, int specify_negative_value) {
//	int x = (x1-x2);
//	int y = (y1-y2);
//	return SafeSqrt(x*x+y*y, specify_negative_value);
//}


//Returns the direction of the vector from point 1 to point 2, in degrees from -180 to 180. (0 = right)
float Angle(int x1, int y1, int x2, int y2) {
	return ArcTan(x2-x1, y2-y1)*57.2958;
}

//The above, but in radians.
float RadianAngle(int x1, int y1, int x2, int y2) {
	return ArcTan(x2-x1, y2-y1);
}

// Returns the squared distance of a vector.
float DistanceSquared( float x, float y ) {
	return (x * x + y * y);
}

//Returns centre of lweapon, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(lweapon anLWeapon, bool usehitbox) { 
	if ( usehitbox ) return anLWeapon->X+anLWeapon->HitWidth/2 + anLWeapon->HitXOffset;
	else return anLWeapon->X+8*anLWeapon->TileWidth + anLWeapon->DrawXOffset;
}

//Returns centre of lweapon, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(lweapon anLWeapon, bool usehitbox) {
	if ( usehitbox ) return anLWeapon->Y+anLWeapon->HitHeight/2 + anLWeapon->HitYOffset;
	else return  anLWeapon->Y+8*anLWeapon->TileHeight + anLWeapon->DrawYOffset;
}

//Returns centre of eweapon, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(eweapon anEWeapon, bool usehitbox) { 
	if ( usehitbox ) return anEWeapon->X+anEWeapon->HitWidth/2 + anEWeapon->HitXOffset;
	else return  anEWeapon->X+8*anEWeapon->TileWidth + anEWeapon->DrawXOffset;
}

//Returns centre of eweapon, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(eweapon anEWeapon, bool usehitbox) {
	if ( usehitbox ) return anEWeapon->Y+anEWeapon->HitHeight/2 + anEWeapon->HitYOffset;
	else return anEWeapon->Y+8*anEWeapon->TileHeight + anEWeapon->DrawYOffset;
}

//Returns centre of npc, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(npc n, bool usehitbox) { 
	if ( usehitbox ) return n->X+n->HitWidth/2 + n->HitXOffset;
	else return n->X+8*n->TileWidth + n->DrawXOffset;
}

//Returns centre of npc, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(npc n, bool usehitbox) {
	if ( usehitbox ) return n->Y+n->HitHeight/2 + n->HitYOffset;
	else return n->Y+8*n->TileHeight + n->DrawYOffset;
}

//Returns centre of npc, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(item i, bool usehitbox) { 
	if ( usehitbox ) return i->X+i->HitWidth/2 + i->HitXOffset;
	else return i->X+8*i->TileWidth + i->DrawXOffset;
}

//Returns centre of npc, with option to use either its actual coordinates, or those of its sprite. 
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(item i, bool usehitbox) {
	if ( usehitbox ) return i->Y+i->HitHeight/2 + i->HitYOffset;
	else return i->X+8*i->TileHeight + i->DrawYOffset;
}


////////////////

//Returns centre of lweapon, with option to include its HitXOffset and DrawXOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(lweapon anLWeapon, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int lx = anLWeapon->X;
	if ( usehitbox ) lx += anLWeapon->HitWidth/2;
	if ( !usehitbox ) lx += 8*anLWeapon->TileWidth;
	if ( trueoffset ) lx += anLWeapon->HitXOffset;
	if ( drawoffset ) lx += anLWeapon->DrawXOffset;
	return lx;
}

//Returns centre of lweapon, with option to include its HitYOffset and DrawYOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(lweapon anLWeapon, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int ly = anLWeapon->Y;
	if ( usehitbox ) ly += anLWeapon->HitHeight/2;
	if ( !usehitbox ) ly += 8*anLWeapon->TileHeight;
	if ( trueoffset ) ly += anLWeapon->HitYOffset;
	if ( drawoffset ) ly += anLWeapon->DrawYOffset;
	return ly;
}

//Returns centre of eweapon, with option to include its HitXOffset and DrawXOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(eweapon anEWeapon, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int ex = anEWeapon->X;
	if ( usehitbox ) ex += anEWeapon->HitWidth/2;
	if ( !usehitbox ) ex += 8*anEWeapon->TileWidth;
	if ( trueoffset ) ex += anEWeapon->HitXOffset;
	if ( drawoffset ) ex += anEWeapon->DrawXOffset;
	return ex;
}

//Returns centre of eweapon, with option to include its HitYOffset and DrawYOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(eweapon anEWeapon, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int ey = anEWeapon->Y;
	if ( usehitbox ) ey += anEWeapon->HitHeight/2;
	if ( !usehitbox ) ey += 8*anEWeapon->TileHeight;
	if ( trueoffset ) ey += anEWeapon->HitYOffset;
	if ( drawoffset ) ey += anEWeapon->DrawYOffset;
	return ey;
}

//Returns centre of npc, with option to include its HitXOffset and DrawXOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(npc n, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int nx = n->X;
	if ( usehitbox ) nx += n->HitWidth/2;
	if ( !usehitbox ) nx += 8*n->TileWidth;
	if ( trueoffset ) nx += n->HitXOffset;
	if ( drawoffset ) nx += n->DrawXOffset;
	return nx;
}

//Returns centre of npc, with option to include its HitYOffset and DrawYOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(npc n, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int ny = n->Y;
	if ( usehitbox ) ny += n->HitHeight/2;
	if ( !usehitbox ) ny += 8*n->TileHeight;
	if ( trueoffset ) ny += n->HitYOffset;
	if ( drawoffset ) ny += n->DrawYOffset;
	return ny;
}

//Returns centre of item, with option to include its HitXOffset and DrawXOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterX(item i, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int ix = i->X;
	if ( usehitbox ) ix += i->HitWidth/2;
	if ( !usehitbox ) ix += 8*i->TileWidth;
	if ( trueoffset ) ix += i->HitXOffset;
	if ( drawoffset ) ix += i->DrawXOffset;
	return ix;
}

//Returns centre of item, with option to include its HitYOffset and DrawYOffset (individually).
//Set 'usehitbox' true to use the hitbox centre, or false to use the sprite centre. 
int CenterY(item i, bool usehitbox, bool trueoffset, bool drawoffset) { 
	int iy = i->Y;
	if ( usehitbox ) iy += i->HitHeight/2;
	if ( !usehitbox ) iy += 8*i->TileHeight;
	if ( trueoffset ) iy += i->HitYOffset;
	if ( drawoffset ) iy += i->DrawYOffset;
	return iy;
}
   

//Returns if two pointers are within a proximity of 'distance' in pixels.
//Link and an object (X-Axis)
bool DistX(int a, int distance) {
    int dist;
	if ( ComboX(a) > Link->X ) dist = ComboX(a) - Link->X;
	else dist = Link->X - ComboX(a);
    return ( dist <= distance );
} 
bool DistX(ffc a, int distance) {
    int dist;
    if ( a->X > Link->X ) dist = a->X - Link->X;
	else dist = Link->X - a->X;
    return ( dist <= distance );
} //Link to ffc distance
bool DistX(lweapon a, int distance) {
    int dist;
    if ( a->X > Link->X ) dist = a->X - Link->X;
	else dist = Link->X - a->X;
    return ( dist <= distance );
}
bool DistX(eweapon a, int distance) {
    int dist;
    if ( a->X > Link->X ) dist = a->X - Link->X;
	else dist = Link->X - a->X;
    return ( dist <= distance );
}
bool DistX(npc a, int distance) {
    int dist;
    if ( a->X > Link->X ) dist = a->X - Link->X;
	else dist = Link->X - a->X;
    return ( dist <= distance );
}
bool DistX(item a, int distance) {
    int dist;
    if ( a->X > Link->X ) dist = a->X - Link->X;
	else dist = Link->X - a->X;
    return ( dist <= distance );
}

//! The signature of this will clash with ProximityX(int a, int b)
//Link and an object (Y-Axis)
bool DistY(int a, int distance) {
    int dist;
	if ( ComboY(a) > Link->Y ) dist = ComboY(a) - Link->Y;
	else dist = Link->Y - ComboY(a);
    return ( dist <= distance );

}
bool DistY(ffc a, int distance) {
    int dist;
    if ( a->Y > Link->Y ) dist = a->Y - Link->Y;
	else dist = Link->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, int distance) {
    int dist;
    if ( a->Y > Link->Y ) dist = a->Y - Link->Y;
	else dist = Link->Y - a->Y;
    return ( dist <= distance );
}
bool DistY(eweapon a, int distance) {
    int dist;
    if ( a->Y > Link->Y ) dist = a->Y - Link->Y;
	else dist = Link->Y - a->Y;
    return ( dist <= distance );
}
bool DistY(npc a, int distance) {
    int dist;
    if ( a->Y > Link->Y ) dist = a->Y - Link->Y;
	else dist = Link->Y - a->Y;
    return ( dist <= distance );
}
bool DistY(item a, int distance) {
    int dist;
    if ( a->Y > Link->Y ) dist = a->Y - Link->Y;
	else dist = Link->Y - a->Y;
    return ( dist <= distance );
}


//Returns if two pointers are within a proximity of 'distance' in pixels.
//Two objects (X-Axis)

//X (combo)
bool DistX(int a, int b, int distance) {
	int dist;
	if ( ComboX(a) > ComboX(b) ) dist = ComboX(a) - ComboX(b);
	else dist = ComboX(b) - ComboX(a);
	return ( dist <= distance );
}
bool DistX(int a, ffc b, int distance) {
    int dist;
    if ( b->X > ComboX(a) ) dist = b->X - ComboX(a);
	else dist = ComboX(a) - b->X;
    return ( dist <= distance );
}
bool DistX(int a, lweapon b, int distance) {
    int dist;
    if ( b->X > ComboX(a) ) dist = b->X - ComboX(a);
	else dist = ComboX(a) - b->X;
    return ( dist <= distance );
} 
bool DistX(int a, eweapon b, int distance) {
    int dist;
    if ( b->X > ComboX(a) ) dist = b->X - ComboX(a);
	else dist = ComboX(a) - b->X;
    return ( dist <= distance );
} 
bool DistX(int a, npc b, int distance) {
    int dist;
    if ( b->X > ComboX(a) ) dist = b->X - ComboX(a);
	else dist = ComboX(a) - b->X;
    return ( dist <= distance );
} 
bool DistX(int a, item b, int distance) {
    int dist;
    if ( b->X > ComboX(a) ) dist = b->X - ComboX(a);
	else dist = ComboX(a) - b->X;
    return ( dist <= distance );
}

//X (ffc)
bool DistX(ffc a, int b, int distance) {
    int dist;
    if ( a->X > ComboX(b) ) dist = a->X - ComboX(b);
	else dist = ComboX(b) - a->X;
    return ( dist <= distance );
}
bool DistX(ffc a, ffc b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(ffc a, lweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(ffc a, eweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(ffc a, npc b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(ffc a, item b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 

//X (lweapon)
bool DistX(lweapon a, int b, int distance) {
    int dist;
    if ( a->X > ComboX(b) ) dist = a->X - ComboX(b);
	else dist = ComboX(b) - a->X;
    return ( dist <= distance );
} 
bool DistX(lweapon a, ffc b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(lweapon a, lweapon b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(lweapon a, eweapon b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(lweapon a, npc b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(lweapon a, item b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 

//X (eweapon)

bool DistX(eweapon a, int b, int distance) {    
    int dist;
    if ( a->X > ComboX(b) ) dist = a->X - ComboX(b);
	else dist = ComboX(b) - a->X;
    return ( dist <= distance );
}

bool DistX(eweapon a, ffc b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(eweapon a, lweapon b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(eweapon a, eweapon b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(eweapon a, npc b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(eweapon a, item b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 

//X (npc)
bool DistX(npc a, int b, int distance) {    
    int dist;
    if ( a->X > ComboX(b) ) dist = a->X - ComboX(b);
	else dist = ComboX(b) - a->X;
    return ( dist <= distance );
}
bool DistX(npc a, ffc b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(npc a, lweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(npc a, eweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(npc a, npc b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(npc a, item b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 

//X (item)
bool DistX(item a, int b, int distance) {
    int dist;
    if ( a->X > ComboX(b) ) dist = a->X - ComboX(b);
	else dist = ComboX(b) - a->X;
    return ( dist <= distance );
}
bool DistX(item a, ffc b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(item a, lweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(item a, eweapon b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(item a, npc b, int distance) {    
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 
bool DistX(item a, item b, int distance) {
    int dist;
    if ( a->X > b->X ) dist = a->X - b->X;
	else dist = b->X - a->X;
    return ( dist <= distance );
} 

//Two objects (Y-Axis)

//Y (combo)
bool DistY(int a, int b, int distance) {
    int dist;
	if ( ComboY(a) > ComboY(b) ) dist = ComboY(a) - ComboY(b);
	else dist = ComboY(b) - ComboY(a);
    return ( dist <= distance );
}
bool DistY(int a, ffc b, int distance) {
    int dist;
    if ( b->Y > ComboY(a) ) dist = b->Y - ComboY(a);
	else dist = ComboY(a) - b->Y;
    return ( dist <= distance );
}
bool DistY(int a, lweapon b, int distance) {
    int dist;
    if ( b->Y > ComboY(a) ) dist = b->Y - ComboY(a);
	else dist = ComboY(a) - b->Y;
    return ( dist <= distance );
} 
bool DistY(int a, eweapon b, int distance) {
    int dist;
    if ( b->Y > ComboY(a) ) dist = b->Y - ComboY(a);
	else dist = ComboY(a) - b->Y;
    return ( dist <= distance );
} 
bool DistY(int a, npc b, int distance) {
    int dist;
    if ( b->Y > ComboY(a) ) dist = b->Y - ComboY(a);
	else dist = ComboY(a) - b->Y;
    return ( dist <= distance );
} 
bool DistY(int a, item b, int distance) {
    int dist;
    if ( b->Y > ComboY(a) ) dist = b->Y - ComboY(a);
	else dist = ComboY(a) - b->Y;
    return ( dist <= distance );
}

bool DistY(ffc a, int b, int distance) {
    int dist;
    if ( a->Y > ComboY(b) ) dist = a->Y - ComboY(b);
	else dist = ComboY(b) - a->Y;
    return ( dist <= distance );
}

//Y (ffc)
bool DistY(ffc a, ffc b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(ffc a, lweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(ffc a, eweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(ffc a, npc b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(ffc a, item b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 

//Y (lweapon)
bool DistY(lweapon a, int b, int distance) {
    int dist;
    if ( a->Y > ComboY(b) ) dist = a->Y - ComboY(b);
	else dist = ComboY(b) - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, ffc b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, lweapon b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, eweapon b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, npc b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(lweapon a, item b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 

//Y (eweapon)
bool DistY(eweapon a, int b, int distance) {    
    int dist;
    if ( a->Y > ComboY(b) ) dist = a->Y - ComboY(b);
	else dist = ComboY(b) - a->Y;
    return ( dist <= distance );
}
bool DistY(eweapon a, ffc b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(eweapon a, lweapon b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(eweapon a, eweapon b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(eweapon a, npc b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(eweapon a, item b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 

//Y (npc)
bool DistY(npc a, int b, int distance) {    
    int dist;
    if ( a->Y > ComboY(b) ) dist = a->Y - ComboY(b);
	else dist = ComboY(b) - a->Y;
    return ( dist <= distance );
}
bool DistY(npc a, ffc b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(npc a, lweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(npc a, eweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(npc a, npc b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(npc a, item b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 

//Y (item)
bool DistY(item a, int b, int distance) {
int dist;
    if ( a->Y > ComboY(b) ) dist = a->Y - ComboY(b);
	else dist = ComboY(b) - a->Y;
    return ( dist <= distance );
}
bool DistY(item a, ffc b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(item a, lweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(item a, eweapon b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(item a, npc b, int distance) {    
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 
bool DistY(item a, item b, int distance) {
    int dist;
    if ( a->Y > b->Y ) dist = a->Y - b->Y;
	else dist = b->Y - a->Y;
    return ( dist <= distance );
} 



bool DistXY(ffc a, lweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc a, eweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc a, npc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc a, item b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc a, ffc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 
//npc

bool DistXY(npc a, lweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc a, eweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc a, npc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc a, item b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc a, ffc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

//lweapon

bool DistXY(lweapon a, lweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(lweapon a, eweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(lweapon a, npc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(lweapon a, item b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(lweapon a, ffc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

//eweapon

bool DistXY(eweapon a, lweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon a, eweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon a, npc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon a, item b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon a, ffc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

//item

bool DistXY(item a, lweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item a, eweapon b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item a, npc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item a, item b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item a, ffc b, int distance) {
	int distx; int disty;
	if ( a->X > b->X ) distx = a->X - b->X;
	else distx = b->X - a->X;
	
	if ( a->Y > b->Y ) disty = a->Y - b->Y;
	else disty = b->Y - a->Y;

	return ( distx <= distance && disty <= distance );
} 

//combo

bool DistXY(int a, lweapon b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, eweapon b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, npc b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, item b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, ffc b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, int b, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a); 
	int bX = ComboX(b); int bY = ComboY(b); 
	if ( aX > bX ) distx = aX - bX;
	else distx = bX - aX;
	
	if ( aY > bY ) disty = aY - bY;
	else disty = bY - aY;

	return ( distx <= distance && disty <= distance );
} 


//combo reversed

bool DistXY(lweapon b, int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon b, int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc b, int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item b, int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc b, int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > b->X ) distx = aX - b->X;
	else distx = b->X - aX;
	
	if ( aY > b->Y ) disty = aY - b->Y;
	else disty = b->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

//Link

bool DistXY(lweapon b, int distance) {
	int distx; int disty;
	if ( Link->X > b->X ) distx = Link->X - b->X;
	else distx = b->X - Link->X;
	
	if ( Link->Y > b->Y ) disty = Link->Y - b->Y;
	else disty = b->Y - Link->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(eweapon b, int distance) {
	int distx; int disty;
	if ( Link->X > b->X ) distx = Link->X - b->X;
	else distx = b->X - Link->X;
	
	if ( Link->Y > b->Y ) disty = Link->Y - b->Y;
	else disty = b->Y - Link->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(npc b, int distance) {
	int distx; int disty;
	if ( Link->X > b->X ) distx = Link->X - b->X;
	else distx = b->X - Link->X;
	
	if ( Link->Y > b->Y ) disty = Link->Y - b->Y;
	else disty = b->Y - Link->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(item b, int distance) {
	int distx; int disty;
	if ( Link->X > b->X ) distx = Link->X - b->X;
	else distx = b->X - Link->X;
	
	if ( Link->Y > b->Y ) disty = Link->Y - b->Y;
	else disty = b->Y - Link->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(ffc b, int distance) {
	int distx; int disty;
	if ( Link->X > b->X ) distx = Link->X - b->X;
	else distx = b->X - Link->X;
	
	if ( Link->Y > b->Y ) disty = Link->Y - b->Y;
	else disty = b->Y - Link->Y;

	return ( distx <= distance && disty <= distance );
} 

bool DistXY(int a, int distance) {
	int distx; int disty; int aX = ComboX(a); int aY = ComboY(a);
	if ( aX > Link->X ) distx = aX - Link->X;
	else distx = Link->X - aX;
	
	if ( aY > Link->Y ) disty = aY - Link->Y;
	else disty = Link->Y - aY;

	return ( distx <= distance && disty <= distance );
} 

int ProximityX(ffc a, ffc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}


int ProximityX(ffc a, lweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}


int ProximityX(ffc a, eweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}
	

int ProximityX(ffc a, npc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}


int ProximityX(ffc a, item b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}


int ProximityX(lweapon a, ffc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(lweapon a, lweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(lweapon a, eweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(lweapon a, npc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(lweapon a, item b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(eweapon a, ffc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(eweapon a, lweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(eweapon a, eweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(eweapon a, npc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(eweapon a, item b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(npc a, ffc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(npc a, lweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(npc a, eweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(npc a, npc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(npc a, item b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}


int ProximityX(item a, ffc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(item a, lweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(item a, eweapon b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(item a, npc b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(item a, item b) {
	if ( a->X > b->X ) return a->X - b->X;
	else return b->X - a->X;
}

int ProximityX(int b, ffc a) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(int b, lweapon a) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(int b, eweapon a) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}
	

int ProximityX(int b, npc a) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(int b, item a) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}

int ProximityX(ffc a, int b) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(lweapon a, int b) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(eweapon a, int b) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}
	

int ProximityX(npc a, int b) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}


int ProximityX(item a, int b) {
	if ( a->X > ComboX(b) ) return a->X - ComboX(b);
	else return ComboX(b) - a->X;
}

int ProximityX(int b, int a) {
	if ( ComboX(a) > ComboX(b) ) return ComboX(a) - ComboX(b);
	else return ComboX(b) - ComboX(a);
}

int ProximityX(ffc a) {
	if ( a->X > Link->X ) return a->X - Link->X;
	else return Link->X - a->X;
}

int ProximityX(lweapon a) {
	if ( a->X > Link->X ) return a->X - Link->X;
	else return Link->X - a->X;
}

int ProximityX(eweapon a) {
	if ( a->X > Link->X ) return a->X - Link->X;
	else return Link->X - a->X;
}

int ProximityX(npc a) {
	if ( a->X > Link->X ) return a->X - Link->X;
	else return Link->X - a->X;
}

int ProximityX(item a) {
	if ( a->X > Link->X ) return a->X - Link->X;
	else return Link->X - a->X;
}

int ProximityX(int a) {
	int ax = ComboX(a);
	if ( ax > Link->X ) return ax - Link->X;
	else return Link->X - ax;
}

int ProximityY(ffc a, ffc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}


int ProximityY(ffc a, lweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}


int ProximityY(ffc a, eweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}
	

int ProximityY(ffc a, npc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}


int ProximityY(ffc a, item b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}


int ProximityY(lweapon a, ffc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(lweapon a, lweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(lweapon a, eweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(lweapon a, npc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(lweapon a, item b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(eweapon a, ffc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(eweapon a, lweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(eweapon a, eweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(eweapon a, npc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(eweapon a, item b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(npc a, ffc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(npc a, lweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(npc a, eweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(npc a, npc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(npc a, item b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}


int ProximityY(item a, ffc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(item a, lweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(item a, eweapon b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(item a, npc b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(item a, item b) {
	if ( a->Y > b->Y ) return a->Y - b->Y;
	else return b->Y - a->Y;
}

int ProximityY(int b, ffc a) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(int b, lweapon a) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(int b, eweapon a) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}
	

int ProximityY(int b, npc a) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(int a, item b) {
	if ( b->Y > ComboY(a) ) return b->Y - ComboY(a);
	else return ComboY(a) - b->Y;
}

int ProximityY(ffc a, int b) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(lweapon a, int b) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(eweapon a, int b) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}
	

int ProximityY(npc a, int b) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}


int ProximityY(item a, int b) {
	if ( a->Y > ComboY(b) ) return a->Y - ComboY(b);
	else return ComboY(b) - a->Y;
}

int ProximityY(int b, int a) {
	if ( ComboY(a) > ComboY(b) ) return ComboY(a) - ComboY(b);
	else return ComboY(b) - ComboY(a);
}

int ProximityY(ffc a) {
	if ( a->Y > Link->Y ) return a->Y - Link->Y;
	else return Link->Y - a->Y;
}

int ProximityY(lweapon a) {
	if ( a->Y > Link->Y ) return a->Y - Link->Y;
	else return Link->Y - a->Y;
}

int ProximityY(eweapon a) {
	if ( a->Y > Link->Y ) return a->Y - Link->Y;
	else return Link->Y - a->Y;
}

int ProximityY(npc a) {
	if ( a->Y > Link->Y ) return a->Y - Link->Y;
	else return Link->Y - a->Y;
}

int ProximityY(item a) {
	if ( a->Y > Link->Y ) return a->Y - Link->Y;
	else return Link->Y - a->Y;
}

int ProximityY(int a) {
	int ay = ComboY(a);
	if ( ay > Link->Y ) return ay - Link->Y;
	else return Link->Y - ay;
}

//ProximityX also needs a precise variation. 

//Proximity from centre of object's hitbox:
int ProximityX(ffc a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

//Rid these of varible declaration inefficiency?
int ProximityX(ffc a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityX(ffc a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}
	

int ProximityX(ffc a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityX(ffc a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityX(lweapon a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(lweapon a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(lweapon a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(lweapon a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(lweapon a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(eweapon a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(eweapon a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(eweapon a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(eweapon a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(eweapon a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(npc a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(npc a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(npc a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(npc a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(npc a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(item a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}
int ProximityX(item a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(item a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(item a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(item a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterX(a,true);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}



//Are multiple function calls less efficient than setting these once as local vars?
//int ProximityX(ffc a) {
//	if ( CenterX(a) > CenterLinkX() ) return CenterX(a) - CenterLinkX();
//	else return CenterLinkX() - CenterX(a);
//}




int ProximityY(ffc a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityY(ffc a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityY(ffc a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}
	

int ProximityY(ffc a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(ffc a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityY(lweapon a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(lweapon a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(lweapon a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(lweapon a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(lweapon a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(eweapon a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(eweapon a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(eweapon a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(eweapon a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(eweapon a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(npc a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}
int ProximityY(npc a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(npc a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(npc a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}
int ProximityY(npc a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}


int ProximityY(item a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(item a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(item a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(item a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityY(item a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterY(a,true);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( a->X > b->X ) return a->X - b->X;
		else return b->X - a->X;
	}
}

int ProximityX(ffc a, bool fromcentre) {
	int ax = CenterX(a);
	int lx = CenterLinkX();
	if ( fromcentre ) {
		if ( ax > lx ) return ax - lx;
		else return lx - ax;
	}
	else {
		if ( a->X > lx ) return a->X - lx;
		else return lx - a->X;
	}
}

int ProximityX(lweapon a, bool fromcentre) {
	int ax = CenterX(a);
	int lx = CenterLinkX();
	if ( fromcentre ) {
		if ( ax > lx ) return ax - lx;
		else return lx - ax;
	}
	else {
		if ( a->X > lx ) return a->X - lx;
		else return lx - a->X;
	}
}


int ProximityX(eweapon a, bool fromcentre) {
	int ax = CenterX(a);
	int lx = CenterLinkX();
	if ( fromcentre ) {
		if ( ax > lx ) return ax - lx;
		else return lx - ax;
	}
	else {
		if ( a->X > lx ) return a->X - lx;
		else return lx - a->X;
	}
}


int ProximityX(npc a, bool fromcentre) {
	int ax = CenterX(a);
	int lx = CenterLinkX();
	if ( fromcentre ) {
		if ( ax > lx ) return ax - lx;
		else return lx - ax;
	}
	else {
		if ( a->X > lx ) return a->X - lx;
		else return lx - a->X;
	}
}


int ProximityX(item a, bool fromcentre) {
	int ax = CenterX(a);
	int lx = CenterLinkX();
	if ( fromcentre ) {
		if ( ax > lx ) return ax - lx;
		else return lx - ax;
	}
	else {
		if ( a->X > lx ) return a->X - lx;
		else return lx - a->X;
	}
}



int ProximityY(ffc a, bool fromcentre) {
	int ay = CenterY(a);
	int ly = CenterLinkY();
	if ( fromcentre ) {
		if ( ay > ly ) return ay - ly;
		else return ly - ay;
	}
	else { 
		if ( a->Y > ly ) return a->Y - ly;
		else return a->Y - ly;
	}
}

int ProximityY(lweapon a, bool fromcentre) {
	int ay = CenterY(a);
	int ly = CenterLinkY();
	if ( fromcentre ) {
		if ( ay > ly ) return ay - ly;
		else return ly - ay;
	}
	else { 
		if ( a->Y > ly ) return a->Y - ly;
		else return a->Y - ly;
	}
}


int ProximityY(eweapon a, bool fromcentre) {
	int ay = CenterY(a);
	int ly = CenterLinkY();
	if ( fromcentre ) {
		if ( ay > ly ) return ay - ly;
		else return ly - ay;
	}
	else { 
		if ( a->Y > ly ) return a->Y - ly;
		else return a->Y - ly;
	}
}


int ProximityY(npc a, bool fromcentre) {
	int ay = CenterY(a);
	int ly = CenterLinkY();
	if ( fromcentre ) {
		if ( ay > ly ) return ay - ly;
		else return ly - ay;
	}
	else { 
		if ( a->Y > ly ) return a->Y - ly;
		else return a->Y - ly;
	}
}


int ProximityY(item a, bool fromcentre) {
	int ay = CenterY(a);
	int ly = CenterLinkY();
	if ( fromcentre ) {
		if ( ay > ly ) return ay - ly;
		else return ly - ay;
	}
	else { 
		if ( a->Y > ly ) return a->Y - ly;
		else return a->Y - ly;
	}
}



///Proximity between *ptr and combo. 

int ProximityX(int a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(int a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(int a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(int a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(int a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(ffc b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(lweapon b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(eweapon b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(npc b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(item b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterX(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > b->X ) return ComboX(a) - b->X;
		else return b->X - ComboX(a);
	}
}

int ProximityX(int b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboX(a);
		int bx = CenterComboX(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboX(a) > ComboX(b) ) return ComboX(a) - ComboX(b);
		else return ComboX(b) - ComboX(a);
	}
}

int ProximityY(int a, ffc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(int a, lweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(int a, eweapon b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(int a, npc b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(int a, item b, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(ffc b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(lweapon b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(eweapon b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(npc b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}

int ProximityY(item b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterY(b,true);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > b->Y ) return ComboY(a) - b->Y;
		else return b->Y - ComboY(a);
	}
}


int ProximityY(int b, int a, bool fromcentre ) {
	if ( fromcentre ) {
		int ax = CenterComboY(a);
		int bx = CenterComboY(b);
		if ( ax > bx ) return ax - bx;
		else return bx - ax;
	}
	else {
		if ( ComboY(a) > ComboY(b) ) return ComboY(a) - ComboY(b);
		else return ComboY(b) - ComboY(a);
	}
}


//Snaps 'x' to the combo grid
//Equivalent to calling ComboX(ComboAt(x,foo));
int GridX(int x) {
	return (x >> 4) << 4;
}

//Snaps 'y' to the combo grid
//Equivalent to calling ComboY(ComboAt(foo,y));
int GridY(int y) {
	return (y >> 4) << 4;
}


//Returns the correct offset to be at the front of a sprite facing in the direction 'dir'
int AtFrontX(int dir) {
	int x = 0;
	if(dir == DIR_UP || dir == DIR_DOWN) x = 8;
	else if(dir == DIR_RIGHT) x = 16;
	return x;
}

int AtFrontY(int dir) {
	int y = 0;
	if(dir == DIR_DOWN) y = 16;
	else if(dir == DIR_LEFT || dir == DIR_RIGHT) y = 8;
	return y;
}

//Returns the correct offset to be 'dist' pixels away from the front of a sprite facing in the direction 'dir'
int InFrontX(int dir, int dist) {
	int x = 0;
	if(dir == DIR_LEFT) x = -16+dist;
	else if(dir == DIR_RIGHT) x = 16-dist;
	return x;
}

int InFrontY(int dir, int dist){
	int y = 0;
	if(dir == DIR_UP) y = -16+dist;
	else if(dir == DIR_DOWN) y = 16-dist;
	return y;
}