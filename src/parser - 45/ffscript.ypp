/*
 Parser for the scripting language compiler. Inteded for use with Flex and Bison;
 use this file to generate y.tab.cpp

command: bison -b y -v -d ffscript.ypp

*/

/* declarations */
%{
#include <stdlib.h>
#include <stdio.h>
#include <cassert>
#include "AST.h"
#include "UtilVisitors.h"
#include "../zsyssimple.h"
#define YYINCLUDED_STDLIB_H
extern int yydebug;
extern int yylineno;
extern char* yytext;
extern int yylex(void);
extern FILE *yyin;
extern AST *resAST;
extern void resetLexer();
void yyerror(const char* s);
string curfilename;
extern YYLTYPE noloc;

#define SHORTCUT(x,d1,d3,dd,l1,l2) ASTExpr *lval = (ASTExpr *)d1; \
					Clone c; \
					lval->execute(c,NULL); \
					x *rhs = new x(l2); \
					rhs->setFirstOperand((ASTExpr *)c.getResult()); \
					rhs->setSecondOperand((ASTExpr *)d3); \
					dd = new ASTStmtAssign(lval, rhs, l1);
%}
%expect 1
%error-verbose
%start Init

%token SCRIPT
%token FLOAT
%token FOR
%token BOOL
%token VOID
%token IF
%token ELSE
%token RETURN
%token IMPORT
%token TRUE
%token FALSE
%token WHILE
%token FFC
%token ITEM
%token ITEMCLASS
%token GLOBAL
%token BREAK
%token CONTINUE
%token CONST
%token DO
%token NPC
%token LWEAPON
%token EWEAPON

%token ASSIGN
%token SEMICOLON
%token COMMA
%token LBRACKET
%token RBRACKET
%token LPAREN
%token RPAREN
%token DOT
%token LBRACE
%token RBRACE
%token ARROW

%token NUMBER
%token PLUSASSIGN
%token MINUSASSIGN
%token TIMESASSIGN
%token DIVIDEASSIGN
%token ANDASSIGN
%token ORASSIGN
%token BITANDASSIGN
%token BITORASSIGN
%token BITXORASSIGN
%token MODULOASSIGN
%token LSHIFTASSIGN
%token RSHIFTASSIGN
%token IDENTIFIER
%token QUOTEDSTRING
%token SINGLECHAR
%token ATSIGN

%left LSHIFT RSHIFT
%left BITAND BITOR BITXOR
%left AND OR
%left NOT BITNOT
%left INCREMENT DECREMENT
%left LE LT GE GT EQ NE
%left PLUS MINUS
%left TIMES DIVIDE
%left MODULO


%%

Init : Prog {resAST = new ASTProgram((ASTDeclList *)$1, @1);}
	;

Prog : Prog GlobalStmt {ASTDeclList *list = (ASTDeclList *)$1;
				list->addDeclaration((ASTDecl *)$2);
				$$ = list;}
	| {$$ = new ASTDeclList(noloc);}
	;

GlobalStmt : Script {$$ = $1;}
	| Import {$$ = $1;}
	| FuncDecl {$$ = $1;}
	| ConstDecl {$$ = $1;}
	| VarDecl SEMICOLON {$$ = $1;}
	;

ConstDecl : CONST FLOAT IDENTIFIER ASSIGN NUMBER SEMICOLON {ASTString *name = (ASTString *)$3;
															ASTFloat *val = (ASTFloat *)$5;
															$$ = new ASTConstDecl(name->getValue(), val,@1);
															delete name;}
          | CONST FLOAT IDENTIFIER ASSIGN MINUS NUMBER SEMICOLON {ASTString *name = (ASTString *)$3;
																  ASTFloat *val = (ASTFloat *)$6;
																  val->set_negative(true);
																  $$ = new ASTConstDecl(name->getValue(), val,@1);
																  delete name;}

Script : ScriptType SCRIPT IDENTIFIER ScriptBlock {ASTType *type = (ASTType *)$1;
												   int scripttype; //Itemdata pointer instead of item pointer
												   ExtractType temp;
												   type->execute(temp, &scripttype);
												   if(scripttype == ScriptParser::TYPE_ITEM)
												   {
													  ASTType *t = type; //so we can keep the locationdata before deleting
													  type = new ASTTypeItemclass(type->getLocation());
													  delete t;
												   }
												   ASTString *name = (ASTString *)$3;
												   ASTDeclList *sblock = (ASTDeclList *)$4;
												   $$ = new ASTScript(type, name->getValue(), sblock,@1);
												   delete name;}
	;

ScriptType : Type {$$ = $1;}
		   | GLOBAL {$$ = new ASTTypeGlobal(@1);}
		   ;

Import : IMPORT QUOTEDSTRING	{ASTString *str = (ASTString *)$2;
								 $$ = new ASTImportDecl(str->getValue(),@1);
								 delete str;}
	;

ScriptBlock : LBRACE ScriptStmtList RBRACE {$$ = $2;}
	| LBRACE RBRACE {$$ = new ASTDeclList(@1);}
	;

ScriptStmtList : ScriptStmt ScriptStmtList {ASTDeclList *dl = (ASTDeclList *)$2;
											dl->addDeclaration((ASTDecl *)$1);
											$$ = dl;}
	| ScriptStmt {	ASTDeclList *dl = new ASTDeclList(@1);
					dl->addDeclaration((ASTDecl *)$1);
					$$ = dl;}
	;

ScriptStmt : VarDecl SEMICOLON {$$ = $1;}
	| FuncDecl {$$ = $1;}
	;

Type : FLOAT {$$ = new ASTTypeFloat(@1);}
	| BOOL {$$ = new ASTTypeBool(@1);}
	| VOID {$$ = new ASTTypeVoid(@1);}
	| FFC {$$ = new ASTTypeFFC(@1);}
	| ITEM {$$ = new ASTTypeItem(@1);}
	| ITEMCLASS {$$ = new ASTTypeItemclass(@1);}
	| NPC		{$$ = new ASTTypeNPC(@1);}
	| LWEAPON	{$$ = new ASTTypeLWpn(@1);}
	| EWEAPON	{$$ = new ASTTypeEWpn(@1);}
	;

Block : LBRACE StmtList RBRACE  {$$=$2;}
	| LBRACE RBRACE {$$ = new ASTBlock(@1);}
	;

StmtList : StmtList Stmt {ASTBlock *block = (ASTBlock *)$1;
				  ASTStmt *stmt = (ASTStmt *)$2;
				  block->addStatement(stmt);
				  $$ = block;}
	| Stmt {ASTBlock *block = new ASTBlock(@1);
		  ASTStmt *stmt = (ASTStmt *)$1;
		  block->addStatement(stmt);
		  $$ = block;}
	;

Stmt : VarDecl SEMICOLON {$$ = $1;}
	| AssignStmt SEMICOLON {$$ = $1;}
	| ShortcutAssignStmt SEMICOLON {$$=$1;}
	| ForStmt {$$ = $1;}
	| IfStmt {$$ = $1;}
	| Block {$$ = $1;}
	| ReturnStmt SEMICOLON {$$ = $1;}
	| WhileStmt {$$ = $1;}
	| DoStmt {$$ = $1;}
	| SEMICOLON {$$ = new ASTStmtEmpty(@1);}
	| Expr SEMICOLON {$$=$1;}
	| BREAK SEMICOLON {$$ = new ASTStmtBreak(@1);}
	| CONTINUE SEMICOLON {$$ = new ASTStmtContinue(@1);}
	;

StmtNoSemi : VarDecl {$$ = $1;}
	| AssignStmt {$$ = $1;}
	| ShortcutAssignStmt {$$=$1;}
	| ForStmt {$$ = $1;}
	| IfStmt {$$ = $1;}
	| Block {$$ = $1;}
	| ReturnStmt {$$ = $1;}
	| WhileStmt {$$ = $1;}
	| DoStmt {$$ = $1;}
	| {$$ = new ASTStmtEmpty(noloc);}
	| Expr {$$=$1;}
	| BREAK {$$ = new ASTStmtBreak(@1);}
	| CONTINUE {$$ = new ASTStmtContinue(@1);}
	;

ShortcutAssignStmt : DotExpr PLUSASSIGN Expr {SHORTCUT(ASTExprPlus,$1,$3,$$,@1,@2) }
	| DotExpr MINUSASSIGN Expr {SHORTCUT(ASTExprMinus,$1,$3,$$,@1,@2) }
	| DotExpr TIMESASSIGN Expr {SHORTCUT(ASTExprTimes,$1,$3,$$,@1,@2) }
	| DotExpr DIVIDEASSIGN Expr {SHORTCUT(ASTExprDivide,$1,$3,$$,@1,@2) }
	| DotExpr ANDASSIGN Expr {SHORTCUT(ASTExprAnd,$1,$3,$$,@1,@2) }
	| DotExpr ORASSIGN Expr {SHORTCUT(ASTExprOr,$1,$3,$$,@1,@2) }
	| DotExpr BITANDASSIGN Expr {SHORTCUT(ASTExprBitAnd,$1,$3,$$,@1,@2) }
	| DotExpr BITORASSIGN Expr {SHORTCUT(ASTExprBitOr,$1,$3,$$,@1,@2) }
 	| DotExpr BITXORASSIGN Expr {SHORTCUT(ASTExprBitXor,$1,$3,$$,@1,@2) }
	| DotExpr LSHIFTASSIGN Expr {SHORTCUT(ASTExprLShift,$1,$3,$$,@1,@2) }
	| DotExpr RSHIFTASSIGN Expr {SHORTCUT(ASTExprRShift,$1,$3,$$,@1,@2) }
	| DotExpr MODULOASSIGN Expr {SHORTCUT(ASTExprModulo,$1,$3,$$,@1,@2) }
	;

AssignStmt : DotExpr ASSIGN Expr {$$ = new ASTStmtAssign((ASTStmt *)$1, (ASTExpr *)$3,@1);};

DotExpr : IDENTIFIER DOT IDENTIFIER {ASTString *lval = (ASTString *)$1;
						 ASTString *rval = (ASTString *)$3;
						 $$ = new ASTExprDot(lval->getValue(), rval->getValue(),@1);
						 delete lval; delete rval;}
	| IDENTIFIER LBRACKET Expr RBRACKET { ASTString *name = (ASTString *)$1;
										ASTExpr *num = (ASTExpr *)$3;
										ASTExprArray *ar = new ASTExprArray("", name->getValue(), @1);
										ar->setIndex(num);
										$$ = ar;
										delete name;}
	| IDENTIFIER DOT IDENTIFIER LBRACKET Expr RBRACKET { ASTString *name = (ASTString *)$1;
										ASTString *name2 = (ASTString *)$3;
										ASTExpr *num = (ASTExpr *)$5;
										ASTExprArray *ar = new ASTExprArray(name->getValue(), name2->getValue(), @1);
										ar->setIndex(num);
										$$ = ar;
										delete name;
										delete name2;}
	| IDENTIFIER {ASTString *rval = (ASTString *)$1;
				  $$ = new ASTExprDot("", rval->getValue(),@1);
				  delete rval;}
	| DotExpr ARROW IDENTIFIER {ASTExpr *id = (ASTExpr *)$1;
								ASTString *rval = (ASTString *)$3;
								$$ = new ASTExprArrow(id, rval->getValue(), @1);
								delete rval;}
	| DotExpr ARROW IDENTIFIER LBRACKET Expr RBRACKET {ASTExpr *id = (ASTExpr *)$1;
											       	   ASTString *rval = (ASTString *)$3;
													   ASTExpr *num = (ASTExpr *)$5;
													   ASTExprArrow *res = new ASTExprArrow(id, rval->getValue(), @1);
													   res->setIndex(num);
													   $$ = res;}
	;

ConstExpr : Expr {
		ASTExpr *expr = (ASTExpr *)$1;
		expr->forceConstant();
		$$ = expr;}
  ;

Expr : Expr OR Expr15 {ASTLogExpr *e = new ASTExprOr(@2);
				 ASTExpr *left = (ASTExpr *)$1;
				 ASTExpr *right = (ASTExpr *)$3;
				 e->setFirstOperand(left);
				 e->setSecondOperand(right);
				 $$=e;}
	| Expr15 {$$=$1;}
	;

Expr15 : Expr15 AND Expr16 {ASTLogExpr *e = new ASTExprAnd(@2);
				 ASTExpr *left = (ASTExpr *)$1;
				 ASTExpr *right = (ASTExpr *)$3;
				 e->setFirstOperand(left);
				 e->setSecondOperand(right);
				 $$=e;}
	| Expr16 {$$=$1;}
	;

Expr16 : Expr16 BITOR Expr17 {ASTBitExpr *e = new ASTExprBitOr(@2);
							  ASTExpr *left = (ASTExpr *)$1;
							  ASTExpr *right = (ASTExpr *)$3;
							  e->setFirstOperand(left);
							  e->setSecondOperand(right);
							  $$=e;}
	| Expr17 {$$=$1;}
	;

Expr17 : Expr17 BITXOR Expr18 {ASTBitExpr *e = new ASTExprBitXor(@2);
							   ASTExpr *left = (ASTExpr *)$1;
							   ASTExpr *right = (ASTExpr *)$3;
							   e->setFirstOperand(left);
							   e->setSecondOperand(right);
							   $$=e;}
	| Expr18 {$$ = $1;}
	;

Expr18 : Expr18 BITAND Expr2 {ASTBitExpr *e = new ASTExprBitAnd(@2);
							   ASTExpr *left = (ASTExpr *)$1;
							   ASTExpr *right = (ASTExpr *)$3;
							   e->setFirstOperand(left);
							   e->setSecondOperand(right);
							   $$=e;}
	| Expr2 {$$=$1;}
	;

Expr2 : Expr2 RelOp Expr25 {ASTRelExpr *e = (ASTRelExpr *)$2;
				   ASTExpr *left = (ASTExpr *)$1;
				   ASTExpr *right = (ASTExpr *)$3;
				   e->setFirstOperand(left);
				   e->setSecondOperand(right);
				   $$=e;}
	| Expr25 {$$ = $1;}
	;

Expr25 : Expr25 ShiftOp Expr3 {ASTShiftExpr *e = (ASTShiftExpr *)$2;
							   ASTExpr *left = (ASTExpr *)$1;
							   ASTExpr *right = (ASTExpr *)$3;
							   e->setFirstOperand(left);
							   e->setSecondOperand(right);
							   $$=e;}
	| Expr3 {$$=$1;}
	;

ShiftOp : LSHIFT {$$ = new ASTExprLShift(@1);}
		| RSHIFT {$$ = new ASTExprRShift(@1);}
		;

RelOp : GT {$$ = new ASTExprGT(@1);}
	| GE {$$ = new ASTExprGE(@1);}
	| LT {$$ = new ASTExprLT(@1);}
	| LE {$$ = new ASTExprLE(@1);}
	| EQ {$$ = new ASTExprEQ(@1);}
	| NE {$$ = new ASTExprNE(@1);}
	;

Expr3 : Expr3 AddOp Expr4 {ASTAddExpr *e = (ASTAddExpr *)$2;
				   ASTExpr *left = (ASTExpr *)$1;
				   ASTExpr *right = (ASTExpr *)$3;
				   e->setFirstOperand(left);
				   e->setSecondOperand(right);
				   $$=e;}
	| Expr4 {$$ = $1;}
	;

AddOp : PLUS {$$ = new ASTExprPlus(@1);}
	| MINUS {$$ = new ASTExprMinus(@1);}
	;

Expr4 : Expr4 MultOp Expr5 {ASTMultExpr *e = (ASTMultExpr *)$2;
				    ASTExpr *left = (ASTExpr *)$1;
				    ASTExpr *right = (ASTExpr *)$3;
				    e->setFirstOperand(left);
				    e->setSecondOperand(right);
				    $$=e;}
	| Expr5 {$$=$1;}
	;

MultOp : TIMES {$$ = new ASTExprTimes(@1);}
	| DIVIDE {$$ = new ASTExprDivide(@1);}
	| MODULO {$$ = new ASTExprModulo(@1);}
	;

Expr5 : NOT Expr5 {ASTUnaryExpr *e = new ASTExprNot(@1);
			 ASTExpr *op = (ASTExpr *)$2;
			 e->setOperand(op);
			 $$=e;}
	| MINUS Expr5 {ASTUnaryExpr *e = new ASTExprNegate(@1);
			   ASTExpr *op = (ASTExpr *)$2;
			   e->setOperand(op);
			   $$=e;}
	| BITNOT Expr5 {ASTUnaryExpr *e = new ASTExprBitNot(@1);
					ASTExpr *op = (ASTExpr *)$2;
					e->setOperand(op);
					$$=e;}
	| Factor {$$=$1;}
	;

Factor : LPAREN Expr RPAREN {$$=$2;}
	| DotExpr {$$ = $1;}
	| DotExpr INCREMENT {ASTUnaryExpr *e = new ASTExprIncrement(@2);
						 ASTExpr *op = (ASTExpr *)$1;
						 e->setOperand(op);
						 $$=e;}
	| INCREMENT DotExpr {ASTUnaryExpr *e = new ASTExprPreIncrement(@1);
						 ASTExpr *op = (ASTExpr *)$2;
						 e->setOperand(op);
						 $$=e;}
	| DotExpr DECREMENT {ASTUnaryExpr *e = new ASTExprDecrement(@2);
						 ASTExpr *op = (ASTExpr *)$1;
						 e->setOperand(op);
						 $$=e;}
	| DECREMENT DotExpr {ASTUnaryExpr *e = new ASTExprPreDecrement(@1);
						 ASTExpr *op = (ASTExpr *)$2;
						 e->setOperand(op);
						 $$=e;}
	| NUMBER {ASTFloat *val = (ASTFloat *)$1;
		    $$ = new ASTNumConstant(val,@1);}
	| SINGLECHAR {ASTString *as = (ASTString *)$1;
			char val[15];
			sprintf(val, "%d", as->getValue().at(1));
			$$ = new ASTNumConstant(new ASTFloat(val,0,@1),@1);}
	| BoolConstant {$$ = $1;}
	| FuncCall {$$=$1;}
	|	FuncId {$$=$1;}
	;

BoolConstant : TRUE {$$ = new ASTBoolConstant(true,@1);}
		 | FALSE {$$ = new ASTBoolConstant(false,@1);}
		 ;

FuncCall : DotExpr LPAREN ExprList RPAREN {ASTFuncCall *fc = (ASTFuncCall *)$3;
							    ASTExpr *name = (ASTExpr *)$1;
							    fc->setName(name);
							    $$=fc;}
	| DotExpr LPAREN RPAREN {ASTFuncCall *fc = new ASTFuncCall(@1);
					    ASTExpr *name = (ASTExpr *)$1;
					    fc->setName(name);
					    $$=fc;}
	;

ExprList : Expr COMMA ExprList {ASTFuncCall *fc = (ASTFuncCall *)$3;
					  ASTExpr *e = (ASTExpr *)$1;
					  fc->addParam(e);
					  $$ = fc;}
	| Expr {ASTFuncCall *fc = new ASTFuncCall(@1);
		  ASTExpr *e = (ASTExpr *)$1;
		  fc->addParam(e);
		  $$ = fc;}
	;

FuncId : ATSIGN IDENTIFIER {
		ASTString *name = (ASTString *)$2;
		$$ = new ASTFuncId(name->getValue(), @2);
		delete name;}
	| ATSIGN IDENTIFIER LPAREN RPAREN {
		ASTString *name = (ASTString *)$2;
		$$ = new ASTFuncId(name->getValue(), @2);
		delete name;}
	| ATSIGN IDENTIFIER LPAREN TypeList RPAREN {
		ASTFuncId *fid = (ASTFuncId *)$4;
		ASTString *name = (ASTString *)$2;
		fid->setName(name->getValue());
		delete name;
		$$ = fid;}
	;

TypeList : Type COMMA TypeList {
		ASTFuncId *fid = (ASTFuncId *)$3;
		fid->addParam((ASTType *)$1);
		$$ = fid;}
	| Type {
		ASTFuncId *fid = new ASTFuncId(@1);
		fid->addParam((ASTType *)$1);
		$$ = fid;}
  ;

ForStmt : FOR LPAREN StmtNoSemi SEMICOLON Expr SEMICOLON StmtNoSemi RPAREN Stmt {ASTStmt *prec = (ASTStmt *)$3;
												ASTExpr *term = (ASTExpr *)$5;
												ASTStmt *incr = (ASTExpr *)$7;
												ASTStmt *stmt = (ASTStmt *)$9;
												$$ = new ASTStmtFor(prec,term,incr,stmt,@1);}
	;

WhileStmt : WHILE LPAREN Expr RPAREN Stmt {ASTExpr *cond = (ASTExpr *)$3;
										   ASTStmt *stmt = (ASTStmt *)$5;
										   $$ = new ASTStmtWhile(cond,stmt,@1);}

DoStmt : DO Stmt WHILE LPAREN Expr RPAREN {ASTExpr *cond = (ASTExpr *)$5;
										   ASTStmt *stmt = (ASTStmt *)$2;
										   $$ = new ASTStmtDo(cond,stmt,@1);}

IfStmt : IF LPAREN Expr RPAREN Stmt {ASTExpr *cond = (ASTExpr *)$3;
							  ASTStmt *stmt = (ASTStmt *)$5;
							  $$ = new ASTStmtIf(cond,stmt,@1);}
	| IF LPAREN Expr RPAREN Stmt ELSE Stmt {ASTExpr *cond = (ASTExpr *)$3;
										ASTStmt *ifstmt = (ASTStmt *)$5;
										ASTStmt *elsestmt = (ASTStmt *)$7;
										$$ = new ASTStmtIfElse(cond,ifstmt,elsestmt,@1);}
	;

ReturnStmt : RETURN Expr {$$ = new ASTStmtReturnVal((ASTExpr *)$2,@1);}
	| RETURN {$$ = new ASTStmtReturn(@1);}
	;


////////////////////////////////////////////////////////////////
// Function Declaration

FuncDecl : Type IDENTIFIER LPAREN FuncParamList RPAREN Block {
			ASTFuncDecl *fd = new ASTFuncDecl(@1);

			ASTType *type = (ASTType *)$1;
	    ASTString *name = (ASTString *)$2;
			ASTList *list = (ASTList *)$4;
			ASTBlock *block = (ASTBlock *)$6;

			fd->setReturnType(type);
			fd->setName(name->getValue());
			fd->copyParamList(list);
			fd->setBlock(block);
			$$ = fd;

 			delete name;
			delete list;}
	;

FuncParamList : {$$ = new ASTList(noloc);}
	|	FuncParamList1 {$$ = $1;}
	;
FuncParamList1 : FuncParam {
			ASTList *list = new ASTList(@1);
			ASTFuncParam *param = (ASTFuncParam *)$1;
			list->addAST(param);
			$$ = list;}
	|	FuncParamList1 COMMA FuncParam {
			ASTList *list = (ASTList *)$1;
			ASTFuncParam *param = (ASTFuncParam *)$3;
			list->addAST(param);
			$$ = list;}
	;

FuncParam : Type IDENTIFIER {
			ASTType *type = (ASTType *)$1;
			ASTString *name = (ASTString *)$2;
			$$ = new ASTFuncParam(type, name->getValue(), @1);
			delete name;}
	;

////////////////////////////////////////////////////////////////
// Variable Declaration

VarDecl :
		Type VarDeclList {
			ASTType *type = (ASTType *)$1;
			ASTVarDeclList *list = (ASTVarDeclList *)$2;
			list->copyType(type);
			delete type;
			$$ = list;}
	;

VarDeclList :
		VarDeclElement {
			ASTVarDeclList *list = new ASTVarDeclList(@1);
			list->addVarDecl((ASTVarDecl *)$1);
			$$ = list;}
	| VarDeclList COMMA VarDeclElement {
			ASTVarDeclList *list = (ASTVarDeclList *)$1;
			list->addVarDecl((ASTVarDecl *)$3);
			$$ = list;}
	;

VarDeclElement :
  // var
	  IDENTIFIER {
			ASTString *name = (ASTString *)$1;
			$$ = new ASTSingleVarDecl(name->getValue(), @1);
			delete name;}
  // var = 10
  |	IDENTIFIER ASSIGN Expr {
			ASTString *name = (ASTString *)$1;
			ASTExpr *init = (ASTExpr *)$3;
			$$ = new ASTSingleVarDecl(name->getValue(), init, @1);
			delete name;}
  // var[10]
	| IDENTIFIER LBRACKET ConstExpr RBRACKET {
			ASTString *name = (ASTString *)$1;
			ASTExpr *size = (ASTExpr *)$3;
			$$ = new ASTArrayDecl(name->getValue(), size, @1);
			delete name;}
  // var[] = {1, 2, 3}
 	| IDENTIFIER LBRACKET RBRACKET ASSIGN LBRACE ArrayInitializer RBRACE {
			ASTString *name = (ASTString *)$1;
			ASTArrayInitializer *init = (ASTArrayInitializer *)$6;
		  $$ = new ASTArrayDecl(name->getValue(), init, @1);
			delete name;}
  // var[10] = {1, 2, 3}
	| IDENTIFIER LBRACKET ConstExpr RBRACKET ASSIGN LBRACE ArrayInitializer RBRACE {
 			ASTString *name = (ASTString *)$1;
			ASTExpr *size = (ASTExpr *)$3;
		  ASTArrayInitializer *init = (ASTArrayInitializer *)$7;
			$$ = new ASTArrayDecl(name->getValue(), size, init, @1);
			delete name;}
	// var[] = "abc"
 	| IDENTIFIER LBRACKET RBRACKET ASSIGN QUOTEDSTRING {
			ASTString *name = (ASTString *)$1;
			ASTString *string = (ASTString *)$5;
			ASTArrayInitializer *init = new ASTArrayInitializer(string, @1);
			$$ = new ASTArrayDecl(name->getValue(), init, @1);
			delete name;
			delete string;}
	// var[10] = "abc"
	| IDENTIFIER LBRACKET ConstExpr RBRACKET ASSIGN QUOTEDSTRING {
			ASTString *name = (ASTString *)$1;
			ASTExpr *size = (ASTExpr *)$3;
			ASTString *string = (ASTString *)$6;
			ASTArrayInitializer *init = new ASTArrayInitializer(string, @1);
		  $$ = new ASTArrayDecl(name->getValue(), size, init, @1);
			delete name;
		  delete string;}
  ;

ArrayInitializer :
		Expr {
			ASTArrayInitializer *init = new ASTArrayInitializer(@1);
			ASTExpr *element = (ASTExpr *)$1;
			init->addElement(element);
			$$ = init;}
	|	Expr COMMA ArrayInitializer {
			ASTArrayInitializer *init = (ASTArrayInitializer *)$3;
			ASTExpr *element = (ASTExpr *)$1;
		 	init->addElement(element);
			$$ = init;}	
	;

%%

/*        programs */

void yyerror(const char *s) {
	char temp[512];
    snprintf(temp, 512, "line %d: %s, on token %s", yylineno, s, yytext);
    box_out(temp);
    box_eol();
}

int go(const char *f)
{
yyin = NULL;
resetLexer();
yyin = fopen(f, "r");
if(!yyin)
{
	box_out("Can't open input file");
	box_eol();
	return -1;
}
	curfilename = string(f);
	int result = yyparse();
	fclose(yyin);
	return result;
}
